<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ntu.ai.course_hk.mapper.ScoreMapper">

    <!-- 定义基础的Score对象ResultMap -->
    <resultMap id="BaseScoreResultMap" type="edu.ntu.ai.course_hk.entity.Score">
        <id property="id" column="score_id"/> <!-- 假设成绩表主键是 score_id 或 id -->
        <result property="studentId" column="student_id"/>
        <result property="courseId" column="course_id"/>
        <result property="grade" column="grade"/>
        <result property="semester" column="semester"/>
        <result property="examDate" column="exam_date"/>
    </resultMap>

    <!-- 定义包含学生和课程详细信息的ResultMap -->
    <resultMap id="ScoreWithDetailsResultMap" type="edu.ntu.ai.course_hk.entity.Score" extends="BaseScoreResultMap">
        <!-- 关联学生信息 -->
        <association property="student" javaType="edu.ntu.ai.course_hk.entity.Student">
            <id property="id" column="s_id"/> <!-- 使用别名避免列名冲突 -->
            <result property="studentNumber" column="s_student_number"/>
            <result property="name" column="s_name"/>
            <result property="gender" column="s_gender"/>
            <result property="age" column="s_age"/>
            <result property="major" column="s_major"/>
            <result property="className" column="s_class_name"/>
            <result property="enrollmentDate" column="s_enrollment_date"/>
            <result property="contactInfo" column="s_contact_info"/>
        </association>
        <!-- 关联课程信息 -->
        <association property="course" javaType="edu.ntu.ai.course_hk.entity.Course">
            <id property="id" column="c_id"/> <!-- 使用别名避免列名冲突 -->
            <result property="courseNumber" column="c_course_number"/>
            <result property="name" column="c_name"/>
            <result property="credits" column="c_credits"/>
            <result property="teacherName" column="c_teacher_name"/>
            <result property="departmentOffering" column="c_department_offering"/>
            <result property="description" column="c_description"/>
        </association>
    </resultMap>

    <select id="findById" resultMap="BaseScoreResultMap">
        SELECT id as score_id, student_id, course_id, grade, semester, exam_date
        FROM score WHERE id = #{id}
    </select>

    <select id="findByStudentIdAndCourseId" resultMap="BaseScoreResultMap">
        SELECT id as score_id, student_id, course_id, grade, semester, exam_date
        FROM score
        WHERE student_id = #{studentId} AND course_id = #{courseId}
    </select>

    <insert id="insert" parameterType="edu.ntu.ai.course_hk.entity.Score" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO score (student_id, course_id, grade, semester, exam_date)
        VALUES (#{studentId}, #{courseId}, #{grade}, #{semester}, #{examDate})
    </insert>

    <update id="update" parameterType="edu.ntu.ai.course_hk.entity.Score">
        UPDATE score
        <set>
            <if test="grade != null">grade = #{grade},</if>
            <if test="semester != null">semester = #{semester},</if>
            <if test="examDate != null">exam_date = #{examDate},</if>
            <!-- 通常 studentId 和 courseId 不应该在这里被修改，除非业务允许 -->
            <!-- <if test="studentId != null">student_id = #{studentId},</if> -->
            <!-- <if test="courseId != null">course_id = #{courseId},</if> -->
        </set>
        WHERE id = #{id}
        <!-- 或者根据 student_id 和 course_id 更新 -->
        <!-- WHERE student_id = #{studentId} AND course_id = #{courseId} -->
    </update>

    <delete id="deleteById">
        DELETE FROM score WHERE id = #{id}
    </delete>

    <delete id="deleteByStudentIdAndCourseId">
        DELETE FROM score WHERE student_id = #{studentId} AND course_id = #{courseId}
    </delete>

    <select id="findScoresByStudentId" resultMap="ScoreWithDetailsResultMap">
        SELECT
            sc.id as score_id, sc.student_id, sc.course_id, sc.grade, sc.semester, sc.exam_date,
            c.id as c_id, c.course_number as c_course_number, c.name as c_name,
            c.credits as c_credits, c.teacher_name as c_teacher_name,
            c.department_offering as c_department_offering, c.description as c_description
        FROM
            score sc
                JOIN
            course c ON sc.course_id = c.id
        WHERE
            sc.student_id = #{studentId}
        ORDER BY c.course_number ASC
    </select>

    <select id="findScoresByCourseId" resultMap="ScoreWithDetailsResultMap">
        SELECT
            sc.id as score_id, sc.student_id, sc.course_id, sc.grade, sc.semester, sc.exam_date,
            s.id as s_id, s.student_number as s_student_number, s.name as s_name,
            s.gender as s_gender, s.age as s_age, s.major as s_major,
            s.class_name as s_class_name, s.enrollment_date as s_enrollment_date,
            s.contact_info as s_contact_info
        FROM
            score sc
                JOIN
            student s ON sc.student_id = s.id
        WHERE
            sc.course_id = #{courseId}
        ORDER BY s.student_number ASC
    </select>

    <select id="findScoresByConditions" parameterType="map" resultMap="ScoreWithDetailsResultMap">
        SELECT
        sc.id as score_id, sc.student_id, sc.course_id, sc.grade, sc.semester, sc.exam_date,
        s.id as s_id, s.student_number as s_student_number, s.name as s_name, s.gender as s_gender,
        s.age as s_age, s.major as s_major, s.class_name as s_class_name,
        s.enrollment_date as s_enrollment_date, s.contact_info as s_contact_info,
        c.id as c_id, c.course_number as c_course_number, c.name as c_name, c.credits as c_credits,
        c.teacher_name as c_teacher_name, c.department_offering as c_department_offering,
        c.description as c_description
        FROM
        score sc
        JOIN
        student s ON sc.student_id = s.id
        JOIN
        course c ON sc.course_id = c.id
        <where>
            <if test="studentName != null and studentName != ''">
                AND s.name LIKE CONCAT('%', #{studentName}, '%')
            </if>
            <if test="studentNumber != null and studentNumber != ''">
                AND s.student_number LIKE CONCAT('%', #{studentNumber}, '%')
            </if>
            <if test="courseName != null and courseName != ''">
                AND c.name LIKE CONCAT('%', #{courseName}, '%')
            </if>
            <if test="courseNumber != null and courseNumber != ''">
                AND c.course_number LIKE CONCAT('%', #{courseNumber}, '%')
            </if>
            <if test="semester != null and semester != ''">
                AND sc.semester = #{semester}
            </if>
            <!-- 可以添加更多查询条件，如成绩范围等 -->
        </where>
        ORDER BY sc.id DESC
        <!-- (可选) 分页 -->
    </select>

    <select id="countScoresByConditions" parameterType="map" resultType="long">
        SELECT count(sc.id)
        FROM
        score sc
        JOIN
        student s ON sc.student_id = s.id
        JOIN
        course c ON sc.course_id = c.id
        <where>
            <if test="studentName != null and studentName != ''">
                AND s.name LIKE CONCAT('%', #{studentName}, '%')
            </if>
            <if test="studentNumber != null and studentNumber != ''">
                AND s.student_number LIKE CONCAT('%', #{studentNumber}, '%')
            </if>
            <if test="courseName != null and courseName != ''">
                AND c.name LIKE CONCAT('%', #{courseName}, '%')
            </if>
            <if test="courseNumber != null and courseNumber != ''">
                AND c.course_number LIKE CONCAT('%', #{courseNumber}, '%')
            </if>
            <if test="semester != null and semester != ''">
                AND sc.semester = #{semester}
            </if>
        </where>
    </select>

    <select id="checkIfScoreExists" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM score WHERE student_id = #{studentId} AND course_id = #{courseId}
    </select>

</mapper>